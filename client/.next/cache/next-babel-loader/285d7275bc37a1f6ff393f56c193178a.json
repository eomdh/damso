{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  updatePostLoading: false,\n  updatePostDone: false,\n  updatePostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  updateCommentLoading: false,\n  updateCommentDone: false,\n  updateCommentError: null,\n  removeCommentLoading: false,\n  removeCommentDone: false,\n  removeCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null\n};\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LOAD_IMAGE_PATHS = 'LOAD_IMAGE_PATHS';\nexport const REMOVE_IMAGE_PATHS = 'LOAD_IMAGE_PATHS';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const UPDATE_COMMENT_REQUEST = 'UPDATE_COMMENT_REQUEST';\nexport const UPDATE_COMMENT_SUCCESS = 'UPDATE_COMMENT_SUCCESS';\nexport const UPDATE_COMMENT_FAILURE = 'UPDATE_COMMENT_FAILURE';\nexport const REMOVE_COMMENT_REQUEST = 'REMOVE_COMMENT_REQUEST';\nexport const REMOVE_COMMENT_SUCCESS = 'REMOVE_COMMENT_SUCCESS';\nexport const REMOVE_COMMENT_FAILURE = 'REMOVE_COMMENT_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.singlePost = action.data, draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case UPDATE_POST_REQUEST:\n        draft.updatePostLoading = true;\n        draft.updatePostDone = false;\n        draft.updatePostError = null;\n        break;\n\n      case UPDATE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          console.log(action.data.Images);\n          post.content = action.data.Content;\n          post.updatedAt = action.data.updatedAt;\n\n          if (action.data.Images) {\n            post.Images = [];\n\n            if (action.data.Images.length > 1) {\n              action.data.Images.map(v => {\n                return post.Images.push({\n                  src: v\n                });\n              });\n            } else {\n              post.Images.push([{\n                src: action.data.Images\n              }]);\n            }\n          }\n\n          ;\n          draft.imagePaths = [];\n          draft.updatePostLoading = false;\n          draft.updatePostDone = true;\n          break;\n        }\n\n      case UPDATE_POST_FAILURE:\n        draft.updatePostLoading = false;\n        draft.updatePostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.mainPosts.find(v => v.id === action.data.postId);\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths.push(action.data);\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LOAD_IMAGE_PATHS:\n        draft.imagePaths = action.data;\n        break;\n\n      case REMOVE_IMAGE_PATHS:\n        draft.imagePaths = [];\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.push(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.data;\n        break;\n\n      case UPDATE_COMMENT_REQUEST:\n        draft.updateCommentLoading = true;\n        draft.updateCommentDone = false;\n        draft.updateCommentError = null;\n        break;\n\n      case UPDATE_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          const comment = post.Comments.find(v => v.id === action.data.CommentId);\n          comment.content = action.data.Content;\n          comment.updatedAt = action.data.updatedAt;\n          draft.updateCommentLoading = false;\n          draft.updateCommentDone = true;\n          break;\n        }\n\n      case UPDATE_COMMENT_FAILURE:\n        draft.updateCommentLoading = false;\n        draft.updateCommentError = action.data;\n        break;\n\n      case REMOVE_COMMENT_REQUEST:\n        draft.removeCommentLoading = true;\n        draft.removeCommentDone = false;\n        draft.removeCommentError = null;\n        break;\n\n      case REMOVE_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments = post.Comments.filter(v => v.id !== action.data.CommentId);\n          draft.removeCommentLoading = false;\n          draft.removeCommentDone = true;\n          break;\n        }\n\n      case REMOVE_COMMENT_FAILURE:\n        draft.removeCommentLoading = false;\n        draft.removeCommentError = action.data;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.data;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.data;\n        break;\n\n      default:\n        break;\n    }\n\n    ;\n  });\n};\n\nexport default reducer;","map":{"version":3,"names":["produce","initialState","mainPosts","imagePaths","singlePost","hasMorePosts","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","updatePostLoading","updatePostDone","updatePostError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","addCommentLoading","addCommentDone","addCommentError","updateCommentLoading","updateCommentDone","updateCommentError","removeCommentLoading","removeCommentDone","removeCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LOAD_IMAGE_PATHS","REMOVE_IMAGE_PATHS","REMOVE_IMAGE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPDATE_COMMENT_REQUEST","UPDATE_COMMENT_SUCCESS","UPDATE_COMMENT_FAILURE","REMOVE_COMMENT_REQUEST","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","reducer","state","action","draft","type","data","error","concat","length","unshift","post","find","v","id","PostId","console","log","Images","content","Content","updatedAt","map","push","src","postId","filter","i","Comments","comment","CommentId","Likers","UserId"],"sources":["C:/Users/DeokHyeon/Desktop/damso/client/reducers/post.js"],"sourcesContent":["import produce from 'immer';  \r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  singlePost: null,\r\n  hasMorePosts: true,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  updatePostLoading: false,\r\n  updatePostDone: false,\r\n  updatePostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  updateCommentLoading: false,\r\n  updateCommentDone: false,\r\n  updateCommentError: null,\r\n  removeCommentLoading: false,\r\n  removeCommentDone: false,\r\n  removeCommentError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n};\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\r\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\r\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LOAD_IMAGE_PATHS = 'LOAD_IMAGE_PATHS';\r\n\r\nexport const REMOVE_IMAGE_PATHS = 'LOAD_IMAGE_PATHS';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const UPDATE_COMMENT_REQUEST = 'UPDATE_COMMENT_REQUEST';\r\nexport const UPDATE_COMMENT_SUCCESS = 'UPDATE_COMMENT_SUCCESS';\r\nexport const UPDATE_COMMENT_FAILURE = 'UPDATE_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_COMMENT_REQUEST = 'REMOVE_COMMENT_REQUEST';\r\nexport const REMOVE_COMMENT_SUCCESS = 'REMOVE_COMMENT_SUCCESS';\r\nexport const REMOVE_COMMENT_FAILURE = 'REMOVE_COMMENT_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.singlePost = action.data,\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n      case LOAD_POSTS_REQUEST:\r\n      case LOAD_USER_POSTS_REQUEST:\r\n      case LOAD_HASHTAG_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n      case LOAD_USER_POSTS_SUCCESS:\r\n      case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.concat(action.data);\r\n        draft.hasMorePosts = action.data.length === 10;\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n      case LOAD_USER_POSTS_FAILURE:\r\n      case LOAD_HASHTAG_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.imagePaths = [];\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case UPDATE_POST_REQUEST:\r\n        draft.updatePostLoading = true;\r\n        draft.updatePostDone = false;\r\n        draft.updatePostError = null;\r\n        break;\r\n      case UPDATE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        console.log(action.data.Images);\r\n        post.content = action.data.Content;\r\n        post.updatedAt = action.data.updatedAt;\r\n        if (action.data.Images) {\r\n          post.Images = [];\r\n          if (action.data.Images.length > 1) {\r\n            action.data.Images.map((v) => {\r\n              return post.Images.push({ src: v });\r\n            });\r\n          } else {\r\n            post.Images.push([{ src: action.data.Images }]);\r\n          }\r\n        };\r\n        draft.imagePaths = [];\r\n        draft.updatePostLoading = false;\r\n        draft.updatePostDone = true;\r\n        break;\r\n      }\r\n      case UPDATE_POST_FAILURE:\r\n        draft.updatePostLoading = false;\r\n        draft.updatePostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesDone = false;\r\n        draft.uploadImagesError = null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS:\r\n        draft.imagePaths.push(action.data);\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        break;\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      case LOAD_IMAGE_PATHS:\r\n        draft.imagePaths = action.data;\r\n        break;\r\n      case REMOVE_IMAGE_PATHS:\r\n        draft.imagePaths = [];\r\n        break;\r\n      case REMOVE_IMAGE:\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post  = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.push(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.data;\r\n        break;\r\n      case UPDATE_COMMENT_REQUEST:\r\n        draft.updateCommentLoading = true;\r\n        draft.updateCommentDone = false;\r\n        draft.updateCommentError = null;\r\n        break;\r\n      case UPDATE_COMMENT_SUCCESS: {\r\n        const post  = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        const comment = post.Comments.find((v) => v.id === action.data.CommentId);\r\n        comment.content = action.data.Content;\r\n        comment.updatedAt = action.data.updatedAt;\r\n        draft.updateCommentLoading = false;\r\n        draft.updateCommentDone = true;\r\n        break;\r\n      }\r\n      case UPDATE_COMMENT_FAILURE:\r\n        draft.updateCommentLoading = false;\r\n        draft.updateCommentError = action.data;\r\n        break;\r\n      case REMOVE_COMMENT_REQUEST:\r\n        draft.removeCommentLoading = true;\r\n        draft.removeCommentDone = false;\r\n        draft.removeCommentError = null;\r\n        break;\r\n      case REMOVE_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments = post.Comments.filter((v) => v.id !== action.data.CommentId);\r\n        draft.removeCommentLoading = false;\r\n        draft.removeCommentDone = true;\r\n        break;\r\n      }\r\n      case REMOVE_COMMENT_FAILURE:\r\n        draft.removeCommentLoading = false;\r\n        draft.removeCommentError = action.data;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.data;\r\n        break;\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.data;\r\n        break;\r\n      default:\r\n        break;\r\n    };\r\n  });\r\n};\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}