{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport shortId from \"shortid\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_OF_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/post', data);\n}\n\n;\n\nfunction* loadPost(action) {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield delay(500);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n\n  ;\n}\n\n;\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\n;\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(500);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id: id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_OF_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n\n  ;\n}\n\n;\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\n;\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(500);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n\n  ;\n}\n\n;\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\n;\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(500);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n\n  ;\n}\n\n;\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\n}\n\n;\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n;\n\nfunction* watchRemoveComment() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n;\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n;\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemoveComment), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","shortId","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_OF_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","loadPost","action","type","err","error","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPost","watchAddPost","watchRemoveComment","watchAddComment","postSaga"],"sources":["C:/Users/DeokHyeon/Desktop/bluejay/client/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport shortId from \"shortid\";\r\nimport {\r\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_OF_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get('/api/post', data);\r\n};\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    // const result = yield call(loadPostAPI, action.data);\r\n    yield delay(500);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  };\r\n};\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n};\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(500);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id: id,\r\n        content: action.data,\r\n      }\r\n    });\r\n    yield put({\r\n      type: ADD_POST_OF_ME,\r\n      data: id,\r\n    })\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  };\r\n};\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data);\r\n};\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(500);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    })\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  };\r\n};\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n};\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(500);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });  \r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  };\r\n};\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\r\n};\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n};\r\n\r\nfunction* watchRemoveComment() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n};\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n};\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPost),\r\n    fork(watchAddPost),\r\n    fork(watchRemoveComment),\r\n    fork(watchAddComment),\r\n  ])\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}